<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on 脚踏实地</title>
    <link>http://localhost:1313/iblog/tags/redis/</link>
    <description>Recent content in Redis on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 17 Jun 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/iblog/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis详解</title>
      <link>http://localhost:1313/iblog/posts/essays/java-redis/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/essays/java-redis/</guid>
      <description>Redis概述 参考文章： https://www.runoob.com/redis/redis-intro.html https://www.redis.com.cn/redis-interview-questions.html 什么是Redis Redis(Remote Dictionary Server) Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，</description>
    </item>
    <item>
      <title>SpringBoot整合redis</title>
      <link>http://localhost:1313/iblog/posts/spring/springboot-redis/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/spring/springboot-redis/</guid>
      <description>导入pom依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.3.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 配置redis RedisConfig.class @Configuration public class RedisConfig { //用于解决注解操作redis 序列话的问题 @Bean(name = &amp;#34;myCacheManager&amp;#34;) public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) { RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory); RedisSerializer&amp;lt;Object&amp;gt; jsonSerializer = new GenericJackson2JsonRedisSerializer(); RedisSerializationContext.SerializationPair&amp;lt;Object&amp;gt; pair = RedisSerializationContext.SerializationPair .fromSerializer(jsonSerializer); RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig() .serializeValuesWith(pair); defaultCacheConfig.entryTtl(Duration.ofMinutes(30)); return new RedisCacheManager(redisCacheWriter, defaultCacheConfig); } }</description>
    </item>
  </channel>
</rss>
