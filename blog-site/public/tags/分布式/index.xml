<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on 脚踏实地</title>
    <link>http://localhost:1313/iblog/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 27 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/iblog/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于Redis的分布式锁的演进</title>
      <link>http://localhost:1313/iblog/posts/java/javaessay/redis-distributed-lock-evolve/</link>
      <pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/java/javaessay/redis-distributed-lock-evolve/</guid>
      <description>基于Redis的分布式锁 基于Redis的分布式锁，是利用Redis提供的原子操作和过期机制来管理分布式环境中的锁。 使用Redis的SETNX命令来设置锁。SET</description>
    </item>
    <item>
      <title>分布式锁详解</title>
      <link>http://localhost:1313/iblog/posts/java/javaessay/distributed-lock/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/java/javaessay/distributed-lock/</guid>
      <description>分布式锁 在单机程序中，我们常用ReetrantLock、synchronized保证线程安全。类似这样： public class MainTest { private static final ReentrantLock lock = new ReentrantLock(); public static void main(String[] args) { lock.lock(); try { System.out.println(&amp;#34;hello world&amp;#34;); }finally { lock.unlock(); } }</description>
    </item>
    <item>
      <title>分布式ID详解</title>
      <link>http://localhost:1313/iblog/posts/java/javaessay/distributed-id/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/java/javaessay/distributed-id/</guid>
      <description>分布式ID 在我们业务数据量不大的时候，单库单表完全可以支撑现有业务，数据再大一点搞个MySQL主从同步读写分离也能对付。 但随着数据日渐增长，主从同步也扛不住了，</description>
    </item>
    <item>
      <title>Elasticsearch详解</title>
      <link>http://localhost:1313/iblog/posts/java/javaessay/java-elasticsearch/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/java/javaessay/java-elasticsearch/</guid>
      <description>概览 Elasticsearch简称为ES，它是一个开源的高扩展的分布式全文搜索引擎，是整个ElasticStack技术栈的核心。 它可以近乎实时的存储、检索数据，</description>
    </item>
    <item>
      <title>Kafka详解</title>
      <link>http://localhost:1313/iblog/posts/java/javaessay/java-kafka/</link>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/java/javaessay/java-kafka/</guid>
      <description>JMS消息模型 JMS即Java Message Service是Java平台的消息传递标准，用于实现消息中间件的通信。JMS提供了两种消息模型：点对点模型和发布订阅模型。 点对点</description>
    </item>
    <item>
      <title>分布式事务详解</title>
      <link>http://localhost:1313/iblog/posts/java/javaessay/distributed-transaction/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/java/javaessay/distributed-transaction/</guid>
      <description>概览 什么是事务？举个例子，你去超市买东西，&amp;ldquo;一手交钱，一手交货&amp;quot;就是一个事务的例子。 交钱和交货必须同时成功，事务才算成功，其中有一个环节失</description>
    </item>
    <item>
      <title>微服务治理详解</title>
      <link>http://localhost:1313/iblog/posts/java/javaessay/small-service/</link>
      <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/java/javaessay/small-service/</guid>
      <description>什么是微服务架构 In short， the microservice architectural style is an approach to developing a single application as a suite of small services，each running in its own process and communicating with lightweight mechanisms， often an HTTP resource API。 These services are built around business capabilities</description>
    </item>
    <item>
      <title>Redis详解</title>
      <link>http://localhost:1313/iblog/posts/java/javaessay/java-redis/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/java/javaessay/java-redis/</guid>
      <description>概述 Redis全称Remote Dictionary Server，是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据</description>
    </item>
  </channel>
</rss>
