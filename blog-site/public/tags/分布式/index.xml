<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式 on 脚踏实地</title>
    <link>http://localhost:1313/iblog/tags/%E5%88%86%E5%B8%83%E5%BC%8F/</link>
    <description>Recent content in 分布式 on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 25 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/iblog/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>分布式锁详解</title>
      <link>http://localhost:1313/iblog/posts/essays/distributed-lock/</link>
      <pubDate>Sat, 25 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/essays/distributed-lock/</guid>
      <description>概述 在代码里面我们常用ReetrantLock、synchronized保证线程安全。通过上面的锁，在某个时刻只能保证一个线程执行锁作用域内的代码。 类似这样： public</description>
    </item>
    <item>
      <title>分布式ID详解</title>
      <link>http://localhost:1313/iblog/posts/essays/distributed-id/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/essays/distributed-id/</guid>
      <description>分布式ID 在我们业务数据量不大的时候，单库单表完全可以支撑现有业务，数据再大一点搞个MySQL主从同步读写分离也能对付。 但随着数据日渐增长，主从同步也扛不住了，</description>
    </item>
    <item>
      <title>Elasticsearch详解</title>
      <link>http://localhost:1313/iblog/posts/essays/java-elasticsearch/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/essays/java-elasticsearch/</guid>
      <description>概览 Elasticsearch简称为ES，它是一个开源的高扩展的分布式全文搜索引擎，是整个ElasticStack技术栈的核心。 它可以近乎实时的存储、检索数据，</description>
    </item>
    <item>
      <title>Kafka详解</title>
      <link>http://localhost:1313/iblog/posts/essays/java-kafka/</link>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/essays/java-kafka/</guid>
      <description>概览 MQ 即 messagequeue 消息队列，是分布式系统的重要组件，主要解决异步消息，应用解耦，消峰等问题。从而实现高可用，高性能，可伸缩和最终一致性的架构。使用较多的MQ有：acti</description>
    </item>
    <item>
      <title>分布式事务详解</title>
      <link>http://localhost:1313/iblog/posts/essays/distributed-transaction/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/essays/distributed-transaction/</guid>
      <description>基础概念 什么是事务 什么是事务？举个例子：你去超市买东西，&amp;ldquo;一手交钱，一手交货&amp;quot;就是一个事务的例子。 交钱和交货必须同时成功，事务才算成功，其</description>
    </item>
    <item>
      <title>微服务治理详解</title>
      <link>http://localhost:1313/iblog/posts/essays/distributed-small-service/</link>
      <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/essays/distributed-small-service/</guid>
      <description>什么是微服务架构 In short， the microservice architectural style is an approach to developing a single application as a suite of small services， each running in its own process and communicating with lightweight mechanisms， often an HTTP resource API。 These services are built around business capabilities and independently deployable</description>
    </item>
    <item>
      <title>Redis详解</title>
      <link>http://localhost:1313/iblog/posts/essays/java-redis/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/essays/java-redis/</guid>
      <description>Redis概述 参考文章： https://www.runoob.com/redis/redis-intro.html https://www.redis.com.cn/redis-interview-questions.html 什么是Redis Redis(Remote Dictionary Server) Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，</description>
    </item>
  </channel>
</rss>
