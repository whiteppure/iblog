<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程指南 on 脚踏实地</title>
    <link>http://localhost:1313/tags/%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</link>
    <description>Recent content in 编程指南 on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 28 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java程序中常见问题及解决方案</title>
      <link>http://localhost:1313/posts/java/programguide/java-always-problems/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/programguide/java-always-problems/</guid>
      <description>解决CPU使用过高 一般在生产环境排查程序故障，都会查看日志什么的，但是有些故障日志是看不出来的，就比如：CPU使用过高。 那应该怎么办呢？我们需要结合Linux命</description>
    </item>
    <item>
      <title>如何重构一个程序</title>
      <link>http://localhost:1313/posts/java/programguide/java-project-reconstitution/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/programguide/java-project-reconstitution/</guid>
      <description>什么是重构 摘自《重构：改善既有代码的设计》 重构(名词形式): 对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。 重构</description>
    </item>
    <item>
      <title>如何减少及解决bug思路</title>
      <link>http://localhost:1313/posts/java/programguide/handle-bugs/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/programguide/handle-bugs/</guid>
      <description>bug的起源: 1945年，一只小飞蛾钻进了计算机电路里，导致系统无法工作，一位名叫格蕾丝·赫柏的人把飞蛾拍死在工作日志上，写道：就是这个 bug(虫子)，害我们今</description>
    </item>
    <item>
      <title>如何写出整洁的代码</title>
      <link>http://localhost:1313/posts/java/programguide/clean-code/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/programguide/clean-code/</guid>
      <description>为什么要写整洁的代码 内容节选自《代码整洁之道》，有改动。 为什么我们需要写整洁的代码？在回答这个问题之前，也许我们应该先思考一下为什么代码会变得糟糕。 是因为想要快</description>
    </item>
    <item>
      <title>简要概述如何做好程序设计</title>
      <link>http://localhost:1313/posts/java/programguide/java-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/programguide/java-design/</guid>
      <description>数据库设计 表结构设计：确保表和字段的设计符合业务需求，避免重复数据和不必要的复杂性。 表的关联关系：检查表之间的关系，如外键，确保它们符合业务规则，并能支持常见的</description>
    </item>
    <item>
      <title>如何从代码层面避免内存泄漏</title>
      <link>http://localhost:1313/posts/java/programguide/java-code-memoryleak/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/programguide/java-code-memoryleak/</guid>
      <description>概述 内存泄漏是指不使用的对象持续占有内存使得内存得不到释放，从而造成内存空间的浪费。 内存泄露最明显问题是频繁GC，从而STW次数增加，导致用户体验变差。如果内存</description>
    </item>
    <item>
      <title>如何写出优雅的代码</title>
      <link>http://localhost:1313/posts/java/programguide/java-code-if-else/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/programguide/java-code-if-else/</guid>
      <description>概述 优雅的代码就是那种看起来简单、易懂，而且好维护的代码。它的设计让人一眼就能明白每部分的作用，避免了复杂和冗余的部分。 它使用清晰的变量和方法名称，能让你很快理</description>
    </item>
    <item>
      <title>Java程序故障排查命令及工具</title>
      <link>http://localhost:1313/posts/java/programguide/java-problem-command-tools/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/java/programguide/java-problem-command-tools/</guid>
      <description>Linux命令 由于大多数Java程序部署到Linux服务器上，故障排查和性能调优通常需要结合使用Linux命令。 Linux命令，可以实时查看系统的CPU、内存、</description>
    </item>
  </channel>
</rss>
