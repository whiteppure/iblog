<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程指南 on 脚踏实地</title>
    <link>http://localhost:1313/iblog/tags/%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</link>
    <description>Recent content in 编程指南 on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 28 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/iblog/tags/%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java程序中常见问题</title>
      <link>http://localhost:1313/iblog/posts/javaprogramguide/java-always-problems/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/javaprogramguide/java-always-problems/</guid>
      <description>解决CPU使用过高 一般在生产环境排查程序故障，都会查看日志什么的，但是有些故障日志是看不出来的，就比如：CPU使用过高。 那应该怎么办呢？我们需要结合Linux命</description>
    </item>
    <item>
      <title>如何重构一个程序</title>
      <link>http://localhost:1313/iblog/posts/javaprogramguide/java-project-reconstitution/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/javaprogramguide/java-project-reconstitution/</guid>
      <description>什么是重构 摘自《重构：改善既有代码的设计》 重构(名词形式): 对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。 重构</description>
    </item>
    <item>
      <title>如何减少及解决bug</title>
      <link>http://localhost:1313/iblog/posts/javaprogramguide/handle-bugs/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/javaprogramguide/handle-bugs/</guid>
      <description>bug的起源: 1945年，一只小飞蛾钻进了计算机电路里，导致系统无法工作，一位名叫格蕾丝·赫柏的人把飞蛾拍死在工作日志上，写道：就是这个 bug(虫子)，害我们今</description>
    </item>
    <item>
      <title>如何写出整洁的代码</title>
      <link>http://localhost:1313/iblog/posts/javaprogramguide/clean-code/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/javaprogramguide/clean-code/</guid>
      <description>为什么要写整洁的代码 内容节选自《代码整洁之道》，有改动。 为什么我们需要写整洁的代码？在回答这个问题之前，也许我们应该先思考一下为什么代码会变得糟糕。 是因为想要快</description>
    </item>
    <item>
      <title>简要概述如何做好程序设计</title>
      <link>http://localhost:1313/iblog/posts/javaprogramguide/java-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/javaprogramguide/java-design/</guid>
      <description>数据库设计 从DDD角度界限上下文、ER图、评审表结构设计是否合理，表的关联关系是否合理、是否创建索引、是否大数据量表考虑放到分片库以及分片字段设计 缓存设计 缓存结</description>
    </item>
    <item>
      <title>规范编写Java代码总结</title>
      <link>http://localhost:1313/iblog/posts/javaprogramguide/java-code-rule/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/javaprogramguide/java-code-rule/</guid>
      <description>编码规范 我们为什么要遵守规范来编码？ 是因为通常在编码过程中我们不只自己进行开发，通常需要一个团队来进行，开发好之后还需要维护，所以编码规范就显的尤为重要。 代码维</description>
    </item>
    <item>
      <title>Java程序的故障排查</title>
      <link>http://localhost:1313/iblog/posts/javaprogramguide/java-problem-command-tools/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/iblog/posts/javaprogramguide/java-problem-command-tools/</guid>
      <description>Linux命令 由于大多数Java程序部署到Linux服务器上，故障排查和性能调优通常需要结合使用Linux命令。 Linux命令，可以实时查看系统的CPU、内存、</description>
    </item>
  </channel>
</rss>
