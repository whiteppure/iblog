<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 大道至简</title>
    <link>https://whiteppure.github.io/iblog/posts/</link>
    <description>Recent content in Posts on 大道至简</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 10 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://whiteppure.github.io/iblog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java数据类型</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-datatype/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-datatype/</guid>
      <description>基本类型 Java语言提供了八种基本类型。六种数值类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型. 俗称4类8种 这里只介绍称4类8种.实际上，JAVA</description>
    </item>
    
    <item>
      <title>Java运算</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-operation/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-operation/</guid>
      <description>运算符与表达式 运算符 运算符指明对操作数的运算方式。组成表达式的Java操作符有很多种。运算符按照其要求的操作数数目来分，可以有单目运算符、双目运算符和三目运算符</description>
    </item>
    
    <item>
      <title>Java异常</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-exception/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-exception/</guid>
      <description>异常类型 Throwable 可以用来表示任何可以作为异常抛出的类，分为两种：Error 和 Exception。 其中 Error 用来表示Java程序无法处理的错误；这类错误一般与硬件有关，与程</description>
    </item>
    
    <item>
      <title>Java集合</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-java-container/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-java-container/</guid>
      <description>概述 Java中的集合主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。 如果你看过ArrayList类源码，就知道A</description>
    </item>
    
    <item>
      <title>JavaIO</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-io/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-io/</guid>
      <description>概念 Java IO通过数据流、序列化和文件系统提供系统输入和输出。 IO，即 in 和 out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-object-oriented/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-object-oriented/</guid>
      <description>面向对象是一种编程思想，包括三大特性和六大原则，其中，三大特性指的是封装、继承和多态；六大原则指的是单一职责原则、开放封闭原则、迪米特原则、里氏替换原则、依赖倒</description>
    </item>
    
    <item>
      <title>Object类方法</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-objectclass-methods/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-objectclass-methods/</guid>
      <description>概览 Object 类位于 java.lang 包中，编译时会自动导入，我们创建一个类时，如果没有明确继承一个父类，那么它就会自动继承Object，成为Object的子类。 Object类可以显示</description>
    </item>
    
    <item>
      <title>Java反射</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-reflect/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-reflect/</guid>
      <description>概述 什么是反射 在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对</description>
    </item>
    
    <item>
      <title>Java多线程</title>
      <link>https://whiteppure.github.io/iblog/posts/rookie/rookie-multi-thread/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/rookie/rookie-multi-thread/</guid>
      <description>相关概念 线程与进程 进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。例如，一个正在运行的程序的实例就是一个进程。 线程是操作系统能够进行运算调度的最</description>
    </item>
    
    <item>
      <title>数据结构与算法</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/data-structures-algorithms/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/data-structures-algorithms/</guid>
      <description>数据结构 数据结构是一门研究组织数据方式的学科，有了编程语言也就有了数据结构，学好数据结构可以编写出更有效率的代码。数据结构是算法的基础，想要学好算法，就必须把数</description>
    </item>
    
    <item>
      <title>规范编写Java代码心得</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-code-rule/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-code-rule/</guid>
      <description>编码规范 我们为什么要遵守规范来编码？ 是因为通常在编码过程中我们不只自己进行开发，通常需要一个团队来进行，开发好之后还需要维护，所以编码规范就显的尤为重要。 代码维</description>
    </item>
    
    <item>
      <title>网络编程</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/net-program-java/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/net-program-java/</guid>
      <description>网络协议 以下内容摘自百度百科： https://baike.baidu.com/item/网络协议/328636 https://baike.baidu.com/i</description>
    </item>
    
    <item>
      <title>MQ详解</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-mq/</link>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-mq/</guid>
      <description>概念 MQ即messagequeue消息队列，是分布式系统的重要组件，主要解决异步消息，应用解耦，消峰等问题。从而实现高可用，高性能，可伸缩和最终一致性的架构。使</description>
    </item>
    
    <item>
      <title>常见故障排查及程序配置</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/eye-beam/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/eye-beam/</guid>
      <description>故障排查基础 收录Linux常用命令，以下命令来自https://www.bilibili.com/video/BV14A411378a 关机/重启/注销 常用命令 作</description>
    </item>
    
    <item>
      <title>事务详解</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-transaction/</link>
      <pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-transaction/</guid>
      <description>基础概念 什么是事务 什么是事务？举个例子：你去超市买东西，&amp;ldquo;一手交钱，一手交货&amp;quot;就是一个事务的例子，交钱和交货必须同时成功，事务才算成功，其</description>
    </item>
    
    <item>
      <title>MySqlSQL优化及锁机制</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/sql-select-fast/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/sql-select-fast/</guid>
      <description>MySql逻辑架构 主要分为：连接层，服务层，引擎层，存储层。 客户端执行一条select命令的流程如下： 连接层：最上层是一些客户端和连接服务，包含本地sock通信</description>
    </item>
    
    <item>
      <title>分布式微服务治理</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-small-service/</link>
      <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-small-service/</guid>
      <description>什么是微服务架构 In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use</description>
    </item>
    
    <item>
      <title>Redis详解</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-redis/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-redis/</guid>
      <description>Redis概述 参考文章： https://www.runoob.com/redis/redis-intro.html https://www.redis.com.cn/redis-interview-questions.html 什么是Redis Redis(Remote Dictionary Server) Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，</description>
    </item>
    
    <item>
      <title>SpringBoot详解</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/java-springboot/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/spring/java-springboot/</guid>
      <description>概述 官网地址：https://spring.io/projects/spring-boot SpringBoot是由Pivotal团队提供的全新框架，其设计目的是</description>
    </item>
    
    <item>
      <title>面两年Java相关问题</title>
      <link>https://whiteppure.github.io/iblog/posts/resume/interview-junior-javaer/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/resume/interview-junior-javaer/</guid>
      <description>面试必问 自我介绍一下 你有什么职业规划 你为什么要离职 说一下你的优缺点 你的期望薪资是多少 你还有什么问题要问的吗 你是否接受加班 基础 说一下UDP、TCP及http与ht</description>
    </item>
    
    <item>
      <title>JVM-垃圾回收器</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collector/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collector/</guid>
      <description>垃圾回收器分类 垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。 由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了</description>
    </item>
    
    <item>
      <title>HashMap详解</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-hashmap/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-hashmap/</guid>
      <description>相关概念 capacity： 容量，默认16； loadFactor： 负载因子，表示HashMap满的程度，默认值为0.75f，也就是说默认情况下，当HashMap中</description>
    </item>
    
    <item>
      <title>JVM-相关概念</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-about/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-about/</guid>
      <description>内存溢出 内存溢出(Out Of Memory，简称OOM)是指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存。 官方文档</description>
    </item>
    
    <item>
      <title>职场及面试中常见的问题</title>
      <link>https://whiteppure.github.io/iblog/posts/resume/interview-questions-and-answers/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/resume/interview-questions-and-answers/</guid>
      <description>面试常见问题 自我介绍 个人经历可以进行适当包装，但是不能造假，一方面如果一旦被人拆穿，后果就不用我说了吧，另一方面如果你说谎，说了一些你自己不感兴趣的项目，在入职</description>
    </item>
    
    <item>
      <title>JVM-垃圾回收</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collection/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collection/</guid>
      <description>垃圾回收 垃圾收集，不是Java语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。 垃圾收集机制是Java的招牌能力，极大</description>
    </item>
    
    <item>
      <title>JVM-执行引擎</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-execute-engine/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-execute-engine/</guid>
      <description>概述 执行引擎是Java虚拟机核心的组成部分之一，属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器。 “虚拟机”是一个相对于“物理机”的概念，这两种机器都有</description>
    </item>
    
    <item>
      <title>JVM-直接内存</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-direct-memory/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-direct-memory/</guid>
      <description>直接内存不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。 直接内存是在Java堆外的、直接向系统申请的内存区间。 操作直接内存演示代码</description>
    </item>
    
    <item>
      <title>JVM-Java对象</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-object/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-object/</guid>
      <description>对象实例化 对象的创建方式 使用new关键字创建：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法； 使用反射方式创建： 使</description>
    </item>
    
    <item>
      <title>Java语法糖</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-syntax-sugar/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-syntax-sugar/</guid>
      <description>原文地址：https://www.jianshu.com/p/0f967298a5d7 语法糖 语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机</description>
    </item>
    
    <item>
      <title>JVM-方法区</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-method-area/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-method-area/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    
    <item>
      <title>JVM-堆</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-heap/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-heap/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    
    <item>
      <title>JVM-本地方法接口</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-interface/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-interface/</guid>
      <description>概念 简单地讲，一个Native Methodt是一个Java调用非Java代码的接囗。 一个Native Method是这样一个Java方法：该方法的实现由非Java</description>
    </item>
    
    <item>
      <title>JVM-本地方法栈</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-stack/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-stack/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    
    <item>
      <title>JVM-虚拟机栈</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-stack/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-stack/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    
    <item>
      <title>JVM-程序计数寄存器</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-pc-register/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-pc-register/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    
    <item>
      <title>JVM-JVM介绍</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-start/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-start/</guid>
      <description>为什么要学习JVM 大部分Java开发人员，除了会在项目中使用到与Java平台相关的各种高精尖技术，对于Java技术的核心Java虚拟机了解甚少。 一些有一定工作经</description>
    </item>
    
    <item>
      <title>Nginx介绍</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/nginx-start/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/nginx-start/</guid>
      <description>Nginx介绍 Nginx (&amp;ldquo;engine x&amp;rdquo;)是一个高性能的HTTP和反向代理服务器，特点是占有内存少，并发能 力强，事实上nginx的并发能力确实在同类型的网页服务器中表</description>
    </item>
    
    <item>
      <title>道德经</title>
      <link>https://whiteppure.github.io/iblog/posts/books/laotze/books-taoteching/</link>
      <pubDate>Wed, 03 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/books/laotze/books-taoteching/</guid>
      <description>道可道，非常道。名可名，非常名。 无名天地之始﹔有名万物之母。 故常无，欲以观其妙﹔常有，欲以观其徼。 此两者，同出而异名，同谓之玄。 玄之又玄，众妙之门。 天下皆知美之</description>
    </item>
    
    <item>
      <title>JVM-Java类加载机制</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-classloader/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-classloader/</guid>
      <description>类加载过程 在Java中，类加载器把一个类装入`JVM中，要经过以下步骤： 加载、验证、准备、解析和初始化。其中验证,准备,解析统称为连接。 这5个阶段一般是顺序发生</description>
    </item>
    
    <item>
      <title>Springmvc原理流程图</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/spring-mvc/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/spring/spring-mvc/</guid>
      <description>流程描述: 用户发送请求至前端控制器 DispatcherServlet; DispatcherServlet 收到请求调用 HandlerMapping 处理器映射器; 处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器</description>
    </item>
    
    <item>
      <title>SpringBoot整合docker</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/springboot-docker/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/spring/springboot-docker/</guid>
      <description>MacOS上安装docker 下载 国内下载网站: http://get.daocloud.io 不推荐下载docker版本太旧了 官网下载: https://docs.docker.com/get-started/#download-and-install-docker 或用homebrew进行下载安装 brew install --cask --appdir=/Applications docker 配置镜像 由于网速原因，可以</description>
    </item>
    
    <item>
      <title>SpringBoot整合kafka</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/springboot-kafka/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/spring/springboot-kafka/</guid>
      <description>kafka介绍 kafka官网: http://kafka.apache.org kafka中文官网: https://kafka.apachecn.org Kafka是一种分布式的，基于发布/订阅的消息系统。主要特点如下： 以时间复杂度为O(1)的方式提供消息持久</description>
    </item>
    
    <item>
      <title>线程状态及创建方式</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/thread-state-and-created/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/thread-state-and-created/</guid>
      <description>线程状态及转换 线程状态共包含6种，6中状态又可以互相的转换。 新建状态(New): 创建了线程后尚未启动； 可运行状态(Runnable): 可能正在运行，也可能正在等</description>
    </item>
    
    <item>
      <title>Docker介绍</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/docker-start/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/docker-start/</guid>
      <description>docker是什么 Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。它是目前流行的 Linux 容器解决方案。 Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件</description>
    </item>
    
    <item>
      <title>Java中常用到的锁</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-lock/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-lock/</guid>
      <description>公平锁 指多个线程按照申请锁的顺序来获取锁类似排队打饭 先来后到 优点: 所有的线程都能得到资源，不会饿死在队列中。 缺点: 吞吐量会下降很多，队列里面除了第一个线程，其他</description>
    </item>
    
    <item>
      <title>Java中集合的线程不安全问题</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-thread-collection/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-thread-collection/</guid>
      <description>ArrayList ArrayList线程不安全示例: public static void main(String[] args) { ArrayList&amp;lt;String&amp;gt; arrayList = new ArrayList&amp;lt;&amp;gt;(); for(int i=0; i&amp;lt; 3; i++) { new Thread(() -&amp;gt; { arrayList.add(UUID.randomUUID().toString()); System.out.println(arrayList); },String.valueOf(i)).start(); } } // ConcurrentModificationException 同步修改异常 Exception in thread &amp;#34;8&amp;#34; java.util.ConcurrentModificationException [null, 2041b613-8068-4ddd-9d01-305f5680d377] [null, 2041b613-8068-4ddd-9d01-305f5680d377, b3e0296d-e263-4632-a023-4267cdec5e25] [null, 2041b613-8068-4ddd-9d01-305f5680d377] 原因分析: 当某个线程正在执行 ad</description>
    </item>
    
    <item>
      <title>CAS原理</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/cas-principle/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/cas-principle/</guid>
      <description>CAS CAS全称为Compare and Swap被译为比较并交换。是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。 java.util.concurrent.atomic 并发包下的所有原子类都是</description>
    </item>
    
    <item>
      <title>SpringBoot整合redis</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/springboot-redis/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/spring/springboot-redis/</guid>
      <description>Redis介绍 redis是开源的一个高性能的 key-value 数据库。 主要特点 Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用 Redi</description>
    </item>
    
    <item>
      <title>SpringBoot整合elasticsearch</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/springboot-elasticsearch/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/spring/springboot-elasticsearch/</guid>
      <description>安装elasticsearch 要注意导入依赖的版本和安装elasticsearch的版本与springboot的兼容问题 用 docker 安装 elasticsearch 本例用elasticsearc</description>
    </item>
    
  </channel>
</rss>
