<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on 唯手熟尔</title>
    <link>https://whiteppure.github.io/iblog/tags/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on 唯手熟尔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 04 Oct 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://whiteppure.github.io/iblog/tags/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java集合</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-java-container/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-java-container/</guid>
      <description>概述 Java中的集合主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。 如果你看过ArrayList类源码，就知道ArrayList底层是通过数组来存储元素的，所以如果严格来说，数组也算集合的一种</description>
    </item>
    <item>
      <title>Java反射</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-reflect/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-reflect/</guid>
      <description>概述 什么是反射 在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。 反射是Java语言的一个特性，它允许程序</description>
    </item>
    <item>
      <title>Object类方法</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-objectclass-methods/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-objectclass-methods/</guid>
      <description>概览 Object 类位于 java.lang 包中，编译时会自动导入，我们创建一个类时，如果没有明确继承一个父类，那么它就会自动继承Object，成为Object的子类。 Object类可以显示继承，也可以隐式继承,效果都是一样的。 class A extends Object{ // to do } class A { // to do } Java Objec</description>
    </item>
    <item>
      <title>Java多线程</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-multi-thread/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-multi-thread/</guid>
      <description>相关概念 线程与进程 进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。例如，一个正在运行的程序的实例就是一个进程。 线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。 一条线程指的是进程中一个单一</description>
    </item>
    <item>
      <title>JavaIO</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-io/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-io/</guid>
      <description>概念 Java IO通过数据流、序列化和文件系统提供系统输入和输出。 IO，即 in 和 out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。 传统的 IO 是通过流技术来处理的。 流（Stream），是一个抽象的概念，</description>
    </item>
    <item>
      <title>面向对象</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-object-oriented/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-object-oriented/</guid>
      <description>面向对象是一种编程思想，包括三大特性和六大原则，其中，三大特性指的是封装、继承和多态；六大原则指的是单一职责原则、开放封闭原则、迪米特原则、里氏替换原则、依赖倒置原则以及接口隔离原则，其中，单一职责原则是指一个类应该是一组相关性很高的函数和</description>
    </item>
    <item>
      <title>Java运算</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-operation/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-operation/</guid>
      <description>运算符与表达式 运算符 运算符指明对操作数的运算方式。组成表达式的Java操作符有很多种。运算符按照其要求的操作数数目来分，可以有单目运算符、双目运算符和三目运算符，它们分别对应于1个、2个、3个操作数。 种类 运算符按其功能来分:有算术运算符、赋</description>
    </item>
    <item>
      <title>Java数据类型</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-datatype/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-datatype/</guid>
      <description>基本类型 Java语言提供了八种基本类型。六种数值类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型. 俗称4类8种 这里只介绍称4类8种.实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类java.lang.Void</description>
    </item>
    <item>
      <title>Java异常</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-exception/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-exception/</guid>
      <description>异常类型 Throwable 可以用来表示任何可以作为异常抛出的类，分为两种：Error 和 Exception。 其中 Error 用来表示Java程序无法处理的错误；这类错误一般与硬件有关，与程序本身无关，通常由系统进行处理，程序本身无法捕获和处理。是不可控制的。 Exception 分为两种</description>
    </item>
  </channel>
</rss>
