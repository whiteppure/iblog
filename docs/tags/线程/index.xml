<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>线程 on 脚踏实地</title>
    <link>https://whiteppure.github.io/iblog/tags/%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in 线程 on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 20 Apr 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://whiteppure.github.io/iblog/tags/%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程创建方式</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/thread-created-way/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/thread-created-way/</guid>
      <description>创建线程 在Java中创建一个线程，有且仅有一种方式，创建一个Thread类实例，并调用它的start方法。 Thread 最经典也是最常见的方式是通过继承Thread类，重写</description>
    </item>
    <item>
      <title>Java中的锁都有什么</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-locks/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-locks/</guid>
      <description>锁 在Java中根据锁的特性来划分可以分为很多，锁的主要作用是确保多线程环境下的数据安全，从而保证程序的正确执行。 在Java中具体&amp;quot;锁&amp;quot;的实现</description>
    </item>
    <item>
      <title>Java中常用线程安全的集合</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-thread-collection/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-thread-collection/</guid>
      <description>Java中常用线程安全的集合 在多线程环境中，数据的一致性和线程的安全性是至关重要的。传统的集合类，如ArrayList、HashMap和HashSet，在并发访</description>
    </item>
    <item>
      <title>CAS详解</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/cas-detail/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/cas-detail/</guid>
      <description>CAS CAS全称为Compare and Swap被译为比较并交换，是一种无锁算法。用于实现并发编程中的原子操作。CAS操作检查某个变量是否与预期的值相同，如果相同则将其更</description>
    </item>
  </channel>
</rss>
