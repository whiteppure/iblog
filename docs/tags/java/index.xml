<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 脚踏实地</title>
    <link>https://whiteppure.github.io/iblog/tags/java/</link>
    <description>Recent content in Java on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 17 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://whiteppure.github.io/iblog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>速览Java程序员面试题及答案，持续更新...</title>
      <link>https://whiteppure.github.io/iblog/posts/resume/interview-junior-javaer/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/resume/interview-junior-javaer/</guid>
      <description>为方便面试，不至于在网上像一个无头苍蝇乱翻，整理了一篇关于面试的资料。本文几乎涵盖了Java所有的知识点，包括：Java基础、网络与安全、常见框架、分布式服务治</description>
    </item>
    <item>
      <title>Java程序常见问题</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-always-problems/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-always-problems/</guid>
      <description>CPU使用过高 一般在生产环境排查程序故障，都会查看日志什么的，但是有些故障日志是看不出来的，就比如：CPU使用过高。 那应该怎么办呢？我们需要结合linux命令和</description>
    </item>
    <item>
      <title>程序脚本总结</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/program-script/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/program-script/</guid>
      <description>Java程序启停shell脚本 #!/bin/sh #非特殊应用下面内存分配已经够用 HEAP_MEMORY=1024M METASPACE_SIZE=256M SERVER_HOME=&amp;#34;$( cd &amp;#34;$( dirname &amp;#34;$0&amp;#34; )&amp;#34; &amp;amp;&amp;amp; pwd )&amp;#34; APP_NAME=${@: -1} #使用说明，用来提示输入参数 help() { echo &amp;#34;Usage: start.sh {start|stop|restart|status|help} APP_NAME.jar&amp;#34; &amp;gt;&amp;amp;2 echo &amp;#34;Examples:&amp;#34; echo &amp;#34; sh start.sh start APP_NAME.jar&amp;#34; echo &amp;#34; sh start.sh stop</description>
    </item>
    <item>
      <title>JVM详解</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-memory-divide/</link>
      <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-memory-divide/</guid>
      <description>JVM整体结构 Java虚拟机有很多，HotSpot VM是目前市面上高性能虚拟机的代表作之一。HotSpot 的技术优势就在于热点代码探测技术（名字就从这来的）和准</description>
    </item>
    <item>
      <title>Java资源干货，持续更新...</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-resource/</link>
      <pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-resource/</guid>
      <description>大厂技术博客 美团技术团队: https://tech.meituan.com 阿里技术团队: https://102.alibaba.com 小米技术团队: https://xiaomi-info.github.io 360技术团队: https://blogs.360.net 有道技术博客: http://techblog.youdao.com 字节跳动博客: https://opensource.bytedance.com/blog 淘宝前端团队: https://fed.taobao.org/blogs 干货资源网站 Java工程师成神之路</description>
    </item>
    <item>
      <title>SpringMVC与SpringWebFlux</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/java-spring-mvc-webflux/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/spring/java-spring-mvc-webflux/</guid>
      <description>Spring MVC Spring Web MVC是建立在Servlet API上的原始Web框架，从一开始就包含在Spring框架中。正式名称 &amp;ldquo;Spring Web MVC &amp;ldquo;来自其源模块的名称（spring-</description>
    </item>
    <item>
      <title>编程专业术语汇总及解释，持续更新...</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-dict/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-dict/</guid>
      <description>Code Review Code Review 翻译成中文是代码评审。Code Review 是一种通过复查代码提高代码质量的过程，通过这个机制我们可以对代码、测试过程和注释进行检查。 CDN 即 Content Delivery Network 的缩写，即内容分发网</description>
    </item>
    <item>
      <title>如何做好程序设计功能</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-design/</guid>
      <description>功能设计流程图 与外部系统交互、本系统模块之间流程，比较好用的画圈软件draw .io或在线的process on 数据库设计 从DDD角度界限上下文、ER图、评审表结构设</description>
    </item>
    <item>
      <title>Java小程序集合</title>
      <link>https://whiteppure.github.io/iblog/posts/toy/java-multi-gadget/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/toy/java-multi-gadget/</guid>
      <description>写在前面 本文中所涉及的程序均为Java开发，如果您想要直接使用这些工具需要提前配置Java环境。所涉及到的程序均提供完整代码，如果您有兴趣可以尝试运行。 使用ja</description>
    </item>
    <item>
      <title>数据结构与算法</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/data-structures-algorithms/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/data-structures-algorithms/</guid>
      <description>数据结构 数据结构是一门研究组织数据方式的学科，有了编程语言也就有了数据结构，学好数据结构可以编写出更有效率的代码。数据结构是算法的基础，想要学好算法，就必须把数</description>
    </item>
    <item>
      <title>网络编程</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/net-program-java/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/net-program-java/</guid>
      <description>网络协议 以下内容摘自百度百科： https://baike.baidu.com/item/网络协议/328636 https://baike.baidu.com/i</description>
    </item>
    <item>
      <title>Java集合</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-java-container/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-java-container/</guid>
      <description>概述 Java中的集合主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。 如果你看过ArrayList类源码，就知道A</description>
    </item>
    <item>
      <title>Java反射</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-reflect/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-reflect/</guid>
      <description>概述 什么是反射 在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对</description>
    </item>
    <item>
      <title>Java程序常见故障排查命令及工具</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/eye-beam/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/eye-beam/</guid>
      <description>故障排查命令 收录Linux常用命令，以下命令来自https://www.bilibili.com/video/BV14A411378a 关机/重启/注销 常用命令 作</description>
    </item>
    <item>
      <title>Object类方法</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-objectclass-methods/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-objectclass-methods/</guid>
      <description>概览 Object 类位于 java.lang 包中，编译时会自动导入，我们创建一个类时，如果没有明确继承一个父类，那么它就会自动继承Object，成为Object的子类。 Object类可以显示</description>
    </item>
    <item>
      <title>Spring详解</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/java-spring/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/spring/java-spring/</guid>
      <description>概览 Spring是一个轻量级的Java开源框架，为了解决企业应用开发的复杂性而创建的。Spring的核心是控制反转（IOC）和面向切面（AOP）。 简单来说，Sp</description>
    </item>
    <item>
      <title>JVM中的垃圾回收器</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collector/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collector/</guid>
      <description>垃圾回收器 如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。 虽然我们对各个收集器进行比较，但并非要挑选出一个最好的收集器。 因为直到现在为止</description>
    </item>
    <item>
      <title>Java多线程</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-multi-thread/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-multi-thread/</guid>
      <description>相关概念 线程与进程 进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。例如，一个正在运行的程序的实例就是一个进程。 线程是操作系统能够进行运算调度的最</description>
    </item>
    <item>
      <title>HashMap详解</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-hashmap/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-hashmap/</guid>
      <description>相关概念 capacity： 容量，默认16； loadFactor： 负载因子，表示HashMap满的程度，默认值为0.75f，也就是说默认情况下，当HashMap中</description>
    </item>
    <item>
      <title>JVM中的一些概念</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-about/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-about/</guid>
      <description>内存溢出 内存溢出(Out Of Memory，简称OOM)是指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存。 官方文档</description>
    </item>
    <item>
      <title>JVM中的垃圾回收机制</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collection/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collection/</guid>
      <description>垃圾回收机制 垃圾回收（Garbage Collection，GC），顾名思义就是释放垃圾占用的空间，防止内存爆掉。有效的使用可以使用的内存，对内存堆中已经死亡的或</description>
    </item>
    <item>
      <title>JVM中的执行引擎</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-execute-engine/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-execute-engine/</guid>
      <description>概述 执行引擎是Java虚拟机核心的组成部分之一，属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器。 “虚拟机”是一个相对于“物理机”的概念，这两种机器都有</description>
    </item>
    <item>
      <title>JVM中的直接内存</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-direct-memory/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-direct-memory/</guid>
      <description>直接内存不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。直接内存是在Java堆外的、直接向系统申请的内存区间。 操作直接内存演示代码</description>
    </item>
    <item>
      <title>从JVM角度理解Java对象</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-object/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-object/</guid>
      <description>对象实例化 对象的创建方式 使用new关键字创建：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法； 使用反射方式创建： 使</description>
    </item>
    <item>
      <title>Java语法糖</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-syntax-sugar/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-syntax-sugar/</guid>
      <description>原文地址：https://www.jianshu.com/p/0f967298a5d7 语法糖 语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机</description>
    </item>
    <item>
      <title>JavaIO</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-io/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-io/</guid>
      <description>概念 Java IO通过数据流、序列化和文件系统提供系统输入和输出。 IO，即 in 和 out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道</description>
    </item>
    <item>
      <title>JVM中的方法区</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-method-area/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-method-area/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM中的堆</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-heap/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-heap/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM中的本地方法接口</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-interface/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-interface/</guid>
      <description>概念 简单地讲，一个Native Methodt是一个Java调用非Java代码的接囗。 一个Native Method是这样一个Java方法：该方法的实现由非Java</description>
    </item>
    <item>
      <title>JVM中的本地方法栈</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-stack/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-stack/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM中的虚拟机栈</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-stack/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-stack/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM中的程序计数寄存器</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-pc-register/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-pc-register/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM介绍</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-start/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-start/</guid>
      <description>为什么要学习JVM 大部分Java开发人员，除了会在项目中使用到与Java平台相关的各种高精尖技术，对于Java技术的核心Java虚拟机了解甚少。 一些有一定工作经</description>
    </item>
    <item>
      <title>面向对象</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-object-oriented/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-object-oriented/</guid>
      <description>面向对象是一种编程思想，包括三大特性和六大原则，其中，三大特性指的是封装、继承和多态；六大原则指的是单一职责原则、开放封闭原则、迪米特原则、里氏替换原则、依赖倒</description>
    </item>
    <item>
      <title>Java类加载机制</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-classloader/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-classloader/</guid>
      <description>类加载过程 在Java中，类加载器把一个class装入JVM中，要经过以下步骤： 加载、验证、准备、解析和初始化。其中验证,准备,解析统称为连接。 这5个阶段一般是顺</description>
    </item>
    <item>
      <title>Java运算</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-operation/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-operation/</guid>
      <description>运算符与表达式 运算符 运算符指明对操作数的运算方式。组成表达式的Java操作符有很多种。运算符按照其要求的操作数数目来分，可以有单目运算符、双目运算符和三目运算符</description>
    </item>
    <item>
      <title>Java数据类型</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-datatype/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-datatype/</guid>
      <description>基本类型 Java语言提供了八种基本类型。六种数值类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型. 俗称4类8种 这里只介绍称4类8种.实际上，JAVA</description>
    </item>
    <item>
      <title>Java异常</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-exception/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-exception/</guid>
      <description>异常类型 Throwable 可以用来表示任何可以作为异常抛出的类，分为两种：Error 和 Exception。 其中 Error 用来表示Java程序无法处理的错误；这类错误一般与硬件有关，与程</description>
    </item>
    <item>
      <title>线程状态及创建方式</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/thread-state-and-created/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/thread-state-and-created/</guid>
      <description>线程状态及转换 线程状态共包含6种，6中状态又可以互相的转换。 新建状态(New): 创建了线程后尚未启动； 可运行状态(Runnable): 可能正在运行，也可能正在等</description>
    </item>
    <item>
      <title>Java中常用到的锁</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-lock/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-lock/</guid>
      <description>公平锁 指多个线程按照申请锁的顺序来获取锁类似排队打饭 先来后到 优点: 所有的线程都能得到资源，不会饿死在队列中。 缺点: 吞吐量会下降很多，队列里面除了第一个线程，其他</description>
    </item>
    <item>
      <title>Java中集合的线程不安全问题</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-thread-collection/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-thread-collection/</guid>
      <description>ArrayList ArrayList线程不安全示例: public static void main(String[] args) { ArrayList&amp;lt;String&amp;gt; arrayList = new ArrayList&amp;lt;&amp;gt;(); for(int i=0; i&amp;lt; 3; i++) { new Thread(() -&amp;gt; { arrayList.add(UUID.randomUUID().toString()); System.out.println(arrayList); },String.valueOf(i)).start(); } } // ConcurrentModificationException 同步修改异常 Exception in thread &amp;#34;8&amp;#34; java.util.ConcurrentModificationException [null, 2041b613-8068-4ddd-9d01-305f5680d377] [null, 2041b613-8068-4ddd-9d01-305f5680d377, b3e0296d-e263-4632-a023-4267cdec5e25] [null, 2041b613-8068-4ddd-9d01-305f5680d377] 原因分析: 当某个线程正在执行 ad</description>
    </item>
  </channel>
</rss>
