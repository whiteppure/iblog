<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 脚踏实地</title>
    <link>https://blog.lijizhi.website/tags/java/</link>
    <description>Recent content in Java on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 22 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.lijizhi.website/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java编译器的「消失魔术」</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-generics-impl/</link>
      <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-generics-impl/</guid>
      <description>代码世界的&amp;quot;智能分类器&amp;quot; 你有一个神奇的盒子，它能自动识别放入的物品类型。泛型就像这个盒子的标签系统： 没有泛型：盒子是个&amp;quot;杂物箱&amp;q</description>
    </item>
    <item>
      <title>Java世界的「X光透视机」</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-reflection-scene/</link>
      <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-reflection-scene/</guid>
      <description>什么是反射 想象你走进一个神秘房间，房间里摆满了上锁的宝箱。正常情况下你需要对应的钥匙才能打开每个箱子，但突然你获得了一个万能开锁器，这个“万能开锁器”就类似于是</description>
    </item>
    <item>
      <title>Java字符串到底能有多长</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-string-howlong/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-string-howlong/</guid>
      <description>编译期 在编写代码时，直接写在代码里的字符串（硬编码字符串）有一个长度限制。 具体来说，字符串的最大长度不能超过65534个字符。如果超过这个限制，编译器会报错。 当</description>
    </item>
    <item>
      <title>为什么Java的String一出生就「不可变」</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-string-final/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-string-final/</guid>
      <description>作为Java开发者，你一定每天都在和String打交道，但你有没有想过：为什么Java的String类被设计成不可变的？ 这个看似简单的设定，背后竟隐藏着语言设计</description>
    </item>
    <item>
      <title>Java对象复制：深拷贝 vs 浅拷贝</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-object-replication/</link>
      <pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-object-replication/</guid>
      <description>如何复制对象 在实际开发过程中，对象的复制与转换是非常常见且重要的操作。这类操作通常出现在不同层之间的数据传递或转换中，例如将数据传输对象（DTO）转换为持久化对</description>
    </item>
    <item>
      <title>网络与安全</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/net-program-java/</link>
      <pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/net-program-java/</guid>
      <description>网络协议 网络协议是计算机网络中设备和系统之间进行数据交换的规则和约定。它定义了数据的格式、传输方式、处理流程以及错误检测与修正的机制，使不同设备能够正确地进行通</description>
    </item>
    <item>
      <title>编程专业术语汇总及解释，持续更新...</title>
      <link>https://blog.lijizhi.website/posts/java/keepupd/java-dict/</link>
      <pubDate>Sat, 23 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/keepupd/java-dict/</guid>
      <description>A API API即Application Programming Interface，翻译过来是应用程序编程接口，它是一组定义了不同软件组件之间交互方式的规范和协议。 简而言之，API 就是软件</description>
    </item>
    <item>
      <title>算法详解</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/java-algorithms/</link>
      <pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/java-algorithms/</guid>
      <description>算法英文对应的单词是Algorithm，它的本意为解决问题的方法，所以算法直接理解就是解决问题的方法。在计算机领域定义就是一系列解决问题的、清晰、可执行的计算机</description>
    </item>
    <item>
      <title>数据结构详解</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/java-data-structures/</link>
      <pubDate>Tue, 19 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/java-data-structures/</guid>
      <description>数据结构是一门研究数据组织方式的学科，是编程语言的重要组成部分。学好数据结构，可以编写出更高效的代码，同时为学习和掌握算法奠定坚实的基础。 数据结构分为两大类：线</description>
    </item>
    <item>
      <title>this关键字详解</title>
      <link>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-this/</link>
      <pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-this/</guid>
      <description>this 在Java中，this是一个特殊的引用，指向当前对象的实例。 JVM会给每个对象分配一个this，来代表当前对象，换句话说，this是一个特殊的变量，它保存了当</description>
    </item>
    <item>
      <title>transient关键字详解</title>
      <link>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-transient/</link>
      <pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-transient/</guid>
      <description>transient transient关键字在Java中用于声明一个类的成员变量，它表示该变量不应被序列化。当对象序列化时，该字段不会被持久化到目标字节流中。也就是说，使用tra</description>
    </item>
    <item>
      <title>strictfp关键字详解</title>
      <link>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-strictfp/</link>
      <pubDate>Thu, 15 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-strictfp/</guid>
      <description>strictfp strictfp可能是最没有存在感的关键字了，很多人写了多年Java甚至都不知道它的存在。 默认情况下，Java中的浮点计算与平台相关。因此，浮点结果的精度取决</description>
    </item>
    <item>
      <title>static关键字详解</title>
      <link>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-static/</link>
      <pubDate>Sat, 10 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-static/</guid>
      <description>static static是Java中的一个关键字，用于定义类级别的成员，类级别的成员是指那些属于整个类，而不是特定对象实例的成员。在Java中，类级别的成员包括静态变量和</description>
    </item>
    <item>
      <title>内存泄漏详解</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/java-jvm-memoryleak/</link>
      <pubDate>Tue, 23 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/java-jvm-memoryleak/</guid>
      <description>什么是内存泄漏 内存泄漏是指不使用的对象持续占有内存使得内存得不到释放，从而造成内存空间的浪费。严格来说，只有对象不会再被程序用到了，但是GC又不能回收他们的情况</description>
    </item>
    <item>
      <title>Java枚举</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-enum/</link>
      <pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-enum/</guid>
      <description>概述 枚举在Java中是一种特殊的类，用来定义一组固定的常量。它在Java5中引入，提供了一种类型安全的方式来定义和使用常量集合。尽管enum看起来像是新的数据类</description>
    </item>
    <item>
      <title>Java泛型</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-generics/</link>
      <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-generics/</guid>
      <description>概览 在Java中，泛型是一种强大的编程特性，允许类、接口和方法在定义时声明一种参数化类型，而在使用时可以指定具体的类型参数。泛型的主要目的是提高代码的重用性和类</description>
    </item>
    <item>
      <title>Java中常见的语法糖</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/java-syntax-sugar/</link>
      <pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/java-syntax-sugar/</guid>
      <description>概览 语法糖是指编程语言中的一种语法结构，它们并不提供新的功能，而是为了让代码更易读、更易写而设计的。 语法糖使得某些常见的编程模式或操作变得更加简洁和直观，但在底</description>
    </item>
    <item>
      <title>synchronized关键字详解</title>
      <link>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-synchronized/</link>
      <pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-synchronized/</guid>
      <description>synchronized synchronized是Java提供的关键字译为同步，是Java中用于实现线程同步的一种机制。它可以确保在同一时间只有一个线程能够执行某段代码，从而避免线程</description>
    </item>
    <item>
      <title>volatile关键字详解</title>
      <link>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-volatile/</link>
      <pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javakeyword/java-keyword-volatile/</guid>
      <description>volatile volatile通常被比喻成轻量级的锁，是Java并发编程中比较重要的一个关键字。volatile作用： 可见性：当一个线程修改了 volatile 变量的值，新的值对于其他线程</description>
    </item>
    <item>
      <title>ArrayList详解</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/java-arraylist/</link>
      <pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/java-arraylist/</guid>
      <description>ArrayList 在List接口实现类中，最常用的就是ArrayList，ArrayList类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，可以添加或删</description>
    </item>
    <item>
      <title>速览Java程序员面试题及答案，持续更新...</title>
      <link>https://blog.lijizhi.website/posts/java/keepupd/interview-junior-javaer/</link>
      <pubDate>Mon, 17 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/keepupd/interview-junior-javaer/</guid>
      <description>为方便面试，不至于在网上像一个无头苍蝇乱翻，整理了一系列关于面试的资料。本系列文章几乎涵盖了Java所有的知识点，包括：Java基础、网络与安全、常见框架、分布</description>
    </item>
    <item>
      <title>Java程序中常见问题</title>
      <link>https://blog.lijizhi.website/posts/java/programguide/java-always-problems/</link>
      <pubDate>Tue, 28 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/programguide/java-always-problems/</guid>
      <description>解决CPU使用过高 一般在生产环境排查程序故障，都会查看日志什么的，但是有些故障日志是看不出来的，就比如：CPU使用过高。 那应该怎么办呢？我们需要结合Linux命</description>
    </item>
    <item>
      <title>程序脚本总结</title>
      <link>https://blog.lijizhi.website/posts/essays/program-script/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/essays/program-script/</guid>
      <description>Java程序启停shell脚本 #!/bin/sh #非特殊应用下面内存分配已经够用 HEAP_MEMORY=1024M METASPACE_SIZE=256M SERVER_HOME=&amp;#34;$( cd &amp;#34;$( dirname &amp;#34;$0&amp;#34; )&amp;#34; &amp;amp;&amp;amp; pwd )&amp;#34; APP_NAME=${@: -1} #使用说明，用来提示输入参数 help() { echo &amp;#34;Usage: start.sh {start|stop|restart|status|help} APP_NAME.jar&amp;#34; &amp;gt;&amp;amp;2 echo &amp;#34;Examples:&amp;#34; echo &amp;#34; sh start.sh start APP_NAME.jar&amp;#34; echo &amp;#34; sh start.sh stop</description>
    </item>
    <item>
      <title>JVM详解</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/java-jvm-detail/</link>
      <pubDate>Sun, 26 May 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/java-jvm-detail/</guid>
      <description>JVM整体结构 Java虚拟机有很多，HotSpot VM是目前市面上高性能虚拟机的代表作之一。HotSpot 的技术优势就在于热点代码探测技术（名字就从这来的）和准</description>
    </item>
    <item>
      <title>资源干货读书推荐，持续更新...</title>
      <link>https://blog.lijizhi.website/posts/java/keepupd/valuable-resource/</link>
      <pubDate>Sat, 30 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/keepupd/valuable-resource/</guid>
      <description>读书推荐 Java电子书 《深入理解计算机系统》 《HeadFirst设计模式》 《Java数据结构和算法》 《大话数据结构》 《Java核心技术卷I基础知识》 《Java编</description>
    </item>
    <item>
      <title>Java定时任务可视化管理</title>
      <link>https://blog.lijizhi.website/posts/java/codesimpl/scheduled-job/</link>
      <pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/codesimpl/scheduled-job/</guid>
      <description>代码结构 pom依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-quartz&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 库表结构 -- ---------------------------- -- 定时任务调度表 -- ---------------------------- drop table if exists sys_job; create table sys_job ( job_id bigint(20) not null auto_increment comment &amp;#39;任务ID&amp;#39;, job_name varchar(64) default &amp;#39;&amp;#39; comment</description>
    </item>
    <item>
      <title>Java整合文件上传功能</title>
      <link>https://blog.lijizhi.website/posts/java/codesimpl/uploadfile-code/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/codesimpl/uploadfile-code/</guid>
      <description>结构 pom.xml fastdfs-client-java-1.27.jar 点击下载 &amp;lt;dependencies&amp;gt; &amp;lt;!-- fastdfs --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.csource&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastdfs-client-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.27&amp;lt;/version&amp;gt; &amp;lt;systemPath&amp;gt;${project.basedir}/lib/fastdfs-client-java-1.27.jar&amp;lt;/systemPath&amp;gt; &amp;lt;scope&amp;gt;system&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--aliyun oss 依赖--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.aliyun.oss&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aliyun-sdk-oss&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.8.11&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.11.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; application.yml server: port: 80 公共部分 FileManagement public interface FileManagement { /** * 设置下一个be</description>
    </item>
    <item>
      <title>Java整合支付功能</title>
      <link>https://blog.lijizhi.website/posts/java/codesimpl/pay-code/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/codesimpl/pay-code/</guid>
      <description>结构 完整代码：https://gitee.com/gitee_pikaqiu/easy-archetype pom.xml &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hutool-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.8.11&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sdk&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;alipay-sdk-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.9.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt;</description>
    </item>
    <item>
      <title>Java管道流设计模式结合业务</title>
      <link>https://blog.lijizhi.website/posts/java/codesimpl/pipeline-business/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/codesimpl/pipeline-business/</guid>
      <description>流程图 代码实现 完整代码：https://gitee.com/gitee_pikaqiu/easy-pipeline pom &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.plugin&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-plugin-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${spring.plugin.core.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt;</description>
    </item>
    <item>
      <title>简要概述如何做好程序设计</title>
      <link>https://blog.lijizhi.website/posts/java/programguide/java-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/programguide/java-design/</guid>
      <description>数据库设计 表结构设计：确保表和字段的设计符合业务需求，避免重复数据和不必要的复杂性。 表的关联关系：检查表之间的关系，如外键，确保它们符合业务规则，并能支持常见的</description>
    </item>
    <item>
      <title>Java小程序集合</title>
      <link>https://blog.lijizhi.website/posts/java/codesimpl/java-multi-gadget/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/codesimpl/java-multi-gadget/</guid>
      <description>写在前面 本文中所涉及的程序均为Java开发，如果您想要直接使用这些工具需要提前配置Java环境。所涉及到的程序均提供完整代码，有兴趣可以尝试运行。 程序使用jav</description>
    </item>
    <item>
      <title>如何写出优雅的代码</title>
      <link>https://blog.lijizhi.website/posts/java/programguide/java-code-if-else/</link>
      <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/programguide/java-code-if-else/</guid>
      <description>概述 优雅的代码就是那种看起来简单、易懂，而且好维护的代码。它的设计让人一眼就能明白每部分的作用，避免了复杂和冗余的部分。 它使用清晰的变量和方法名称，能让你很快理</description>
    </item>
    <item>
      <title>Java集合</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-java-container/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-java-container/</guid>
      <description>概述 Java中的集合主要包括Collection和Map两种，Collection存储着对象的集合，而Map存储着键值对的映射表。 数组 如果你看过ArrayLis</description>
    </item>
    <item>
      <title>Java反射</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-reflect/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-reflect/</guid>
      <description>概述 在Java程序运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法，对于任意一个对象，都能够调用它的任意方法和属性。这种动态获取信息以及动态调用</description>
    </item>
    <item>
      <title>Java程序的故障排查</title>
      <link>https://blog.lijizhi.website/posts/java/programguide/java-problem-command-tools/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/programguide/java-problem-command-tools/</guid>
      <description>Linux命令 由于大多数Java程序部署到Linux服务器上，故障排查和性能调优通常需要结合使用Linux命令。 Linux命令，可以实时查看系统的CPU、内存、</description>
    </item>
    <item>
      <title>JavaObject类方法</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-objectclass-methods/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-objectclass-methods/</guid>
      <description>概览 Object类位于java.lang包中，编译时会自动导入。当我们创建一个类时，如果没有明确继承一个父类，那么它就会自动继承Object，成为Object的</description>
    </item>
    <item>
      <title>Spring详解</title>
      <link>https://blog.lijizhi.website/posts/java/spring/java-spring/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/spring/java-spring/</guid>
      <description>概览 Spring是一个轻量级的Java开源框架，是为了解决企业应用开发的复杂性而创建的。Spring的核心是控制反转（IOC）和面向切面（AOP）。 IOC叫控制</description>
    </item>
    <item>
      <title>JVM中的垃圾回收器</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/java-garbage-collector/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/java-garbage-collector/</guid>
      <description>如果说收集算法是内存回收的方法论，那么垃圾收集器就是内存回收的具体实现。 虽然我们对各个收集器进行比较，但并非要挑选出一个最好的收集器。 因为直到现在为止还没有最好</description>
    </item>
    <item>
      <title>Java多线程</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-multi-thread/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-multi-thread/</guid>
      <description>线程与进程 进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。一个正在运行的程序的实例就是一个进程。 线程是操作系统能够进行运算调度的最小单位。它被包</description>
    </item>
    <item>
      <title>HashMap详解</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/java-hashmap/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/java-hashmap/</guid>
      <description>HashMap HashMap是一个散列表，它存储的内容是键值对(key-value)映射。 HashMap实现了Map接口，根据键的HashCode值存储数据，具有很快的访问</description>
    </item>
    <item>
      <title>JVM中的一些概念</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-about/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-about/</guid>
      <description>内存溢出 内存溢出(Out Of Memory，简称OOM)是指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存。 官方文档</description>
    </item>
    <item>
      <title>JVM中的垃圾回收机制</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/java-garbage-collection/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/java-garbage-collection/</guid>
      <description>什么是垃圾 垃圾回收（Garbage Collection，GC），顾名思义就是释放垃圾占用的空间，防止内存爆掉。有效的使用可以使用的内存，对内存堆中已经死亡的或者</description>
    </item>
    <item>
      <title>JVM中的执行引擎</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-execute-engine/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-execute-engine/</guid>
      <description>概述 执行引擎是Java虚拟机核心的组成部分之一，属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器。 “虚拟机”是一个相对于“物理机”的概念，这两种机器都有</description>
    </item>
    <item>
      <title>JVM中的直接内存</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-direct-memory/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-direct-memory/</guid>
      <description>直接内存不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。直接内存是在Java堆外的、直接向系统申请的内存区间。 而且也可能导致Out</description>
    </item>
    <item>
      <title>从JVM角度理解Java对象</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-object/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-object/</guid>
      <description>对象的创建方式 常见的有五种创建对象方式： 使用new关键字创建；使用new关键字创建对象是最常见的方式，直接调用类的构造方法，优点是语法简单直观，执行效率高，适用</description>
    </item>
    <item>
      <title>JavaIO</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-io/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-io/</guid>
      <description>概览 IO，即in和out的缩写，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。 从计算机结构的角度来看IO，IO就</description>
    </item>
    <item>
      <title>JVM中的方法区</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-method-area/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-method-area/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM中的堆</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-heap/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-heap/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM中的本地方法接口</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-native-interface/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-native-interface/</guid>
      <description>概念 简单地讲，一个Native Method是一个Java调用非Java代码的接囗。一个Native Method该方法的实现由非Java语言实现，比如C。 这个特征</description>
    </item>
    <item>
      <title>JVM中的本地方法栈</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-native-stack/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-native-stack/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM中的虚拟机栈</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-stack/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-stack/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM中的程序计数寄存器</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-pc-register/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-pc-register/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对</description>
    </item>
    <item>
      <title>JVM介绍</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-start/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-start/</guid>
      <description>为什么要学习JVM 大部分Java开发人员，除了会在项目中使用到与Java平台相关的各种高精尖技术，对于Java技术的核心Java虚拟机了解甚少。 一些有一定工作经</description>
    </item>
    <item>
      <title>Java面向对象</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-object-oriented/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-object-oriented/</guid>
      <description>概览 面向对象简称OO(object-oriented)是相对面向过程(procedure-oriented)来说的，是一种编程思想，Java就是一门面向对象的语</description>
    </item>
    <item>
      <title>Java类加载机制</title>
      <link>https://blog.lijizhi.website/posts/java/jvm/jvm-classloader/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/jvm/jvm-classloader/</guid>
      <description>类加载过程 在Java中，类加载器把一个class装入JVM中，要经过以下步骤： 加载、验证、准备、解析和初始化。其中验证，准备，解析统称为连接。 这5个阶段一般是顺</description>
    </item>
    <item>
      <title>Java运算</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-operation/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-operation/</guid>
      <description>运算符与表达式 运算符 运算符指明对操作数的运算方式。组成表达式的Java操作符有很多种。 运算符按照其要求的操作数数目来分，可以有单目运算符、双目运算符和三目运算符</description>
    </item>
    <item>
      <title>Java数据类型</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-datatype/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-datatype/</guid>
      <description>基本类型 Java语言提供了八种基本类型。六种数值类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型，俗称4类8种。 这里只介绍称4类8种，实际上，Jav</description>
    </item>
    <item>
      <title>Java异常</title>
      <link>https://blog.lijizhi.website/posts/java/javabasics/rookie-exception/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javabasics/rookie-exception/</guid>
      <description>异常类型 Throwable可以用来表示任何可以作为异常抛出的类，分为两种：Error 和 Exception。 其中Error用来表示Java程序无法处理的错误，这类</description>
    </item>
    <item>
      <title>线程创建方式</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/thread-created-way/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/thread-created-way/</guid>
      <description>创建线程 在Java中创建一个线程，有且仅有一种方式，创建一个Thread类实例，并调用它的start方法。 Thread 最经典也是最常见的方式是通过继承Thread类，重写</description>
    </item>
    <item>
      <title>Java中的锁都有什么</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/java-locks/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/java-locks/</guid>
      <description>锁 在Java中根据锁的特性来划分可以分为很多，锁的主要作用是确保多线程环境下的数据安全，从而保证程序的正确执行。 在Java中具体&amp;quot;锁&amp;quot;的实现</description>
    </item>
    <item>
      <title>Java中常用线程安全的集合</title>
      <link>https://blog.lijizhi.website/posts/java/javaessay/java-thread-collection/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javaessay/java-thread-collection/</guid>
      <description>Java中常用线程安全的集合 在多线程环境中，数据的一致性和线程的安全性是至关重要的。传统的集合类，如ArrayList、HashMap和HashSet，在并发访</description>
    </item>
  </channel>
</rss>
