<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 唯手熟尔</title>
    <link>https://whiteppure.github.io/iblog/tags/java/</link>
    <description>Recent content in Java on 唯手熟尔</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 14 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://whiteppure.github.io/iblog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringMVC与SpringWebFlux</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/java-spring-mvc-webflux/</link>
      <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/spring/java-spring-mvc-webflux/</guid>
      <description>Spring MVC Spring Web MVC是建立在Servlet API上的原始Web框架，从一开始就包含在Spring框架中。正式名称 &amp;ldquo;Spring Web MVC &amp;ldquo;来自其源模块的名称（spring-webmvc），但它更常被称为 &amp;ldquo;Spring MVC&amp;rdquo;。 SpringMVC是基于S</description>
    </item>
    
    <item>
      <title>编程常用词汇汇总</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-dict/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-dict/</guid>
      <description>QPS 即 Queries Per Second的缩写，每秒能处理查询数目。是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。 TPS 即 Transactions Per Second的缩写，每秒处理的事务数目。一个事务是指一个客户机向服务器发送请求然后服务</description>
    </item>
    
    <item>
      <title>如何做好程序设计功能</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-design/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-design/</guid>
      <description>产品需求澄清、PN排期及任务分解 开发设计评审 功能设计流程图 与外部系统交互、本系统模块之间流程，比较好用的画圈软件draw .io或在线的process on 数据库设计 从DDD角度界限上下文、ER图、评审表结构设计是否合理，表的关联关系是否合理、是</description>
    </item>
    
    <item>
      <title>Java小程序</title>
      <link>https://whiteppure.github.io/iblog/posts/readme/java-gadget/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/readme/java-gadget/</guid>
      <description>写在前面 本文中所涉及的程序均为Java开发，如果您想要直接使用这些工具需要提前配置Java环境。所涉及到的程序均提供完整代码，如果您有兴趣可以尝试运行。 使用java -jar命令启动 某些程序功能并不是很完善，但是也可以凑合着用，写这些程序的主</description>
    </item>
    
    <item>
      <title>数据结构与算法</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/data-structures-algorithms/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/data-structures-algorithms/</guid>
      <description>数据结构 数据结构是一门研究组织数据方式的学科，有了编程语言也就有了数据结构，学好数据结构可以编写出更有效率的代码。数据结构是算法的基础，想要学好算法，就必须把数据结构学到位。 数据结构包括：线性结构、非线性结构。 线性结构作为最常用的数据结构，</description>
    </item>
    
    <item>
      <title>网络编程</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/net-program-java/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/net-program-java/</guid>
      <description>网络协议 以下内容摘自百度百科： https://baike.baidu.com/item/网络协议/328636 https://baike.baidu.com/item/网络七层协议/6056879 网络协议指的是计算机网络中互相通信的对等实体</description>
    </item>
    
    <item>
      <title>Java集合</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-java-container/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-java-container/</guid>
      <description>概述 Java中的集合主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。 如果你看过ArrayList类源码，就知道ArrayList底层是通过数组来存储元素的，所以如果严格来说，数组也算集合的一种</description>
    </item>
    
    <item>
      <title>Java反射</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-reflect/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-reflect/</guid>
      <description>概述 什么是反射 在运行状态中，对于任意一个实体类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。 反射是Java语言的一个特性，它允许程序</description>
    </item>
    
    <item>
      <title>Object类方法</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-objectclass-methods/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-objectclass-methods/</guid>
      <description>概览 Object 类位于 java.lang 包中，编译时会自动导入，我们创建一个类时，如果没有明确继承一个父类，那么它就会自动继承Object，成为Object的子类。 Object类可以显示继承，也可以隐式继承,效果都是一样的。 class A extends Object{ // to do } class A { // to do } Java Objec</description>
    </item>
    
    <item>
      <title>Spring详解</title>
      <link>https://whiteppure.github.io/iblog/posts/spring/java-spring/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/spring/java-spring/</guid>
      <description>概览 Spring是一个轻量级的Java开源框架，为了解决企业应用开发的复杂性而创建的。Spring的核心是控制反转（IOC）和面向切面（AOP）。 简单来说，Spring是一个分层的JavaSE/EE 一站式轻量级开源框架。在每一层都提供支持。</description>
    </item>
    
    <item>
      <title>面试Java可能会被问到的问题</title>
      <link>https://whiteppure.github.io/iblog/posts/resume/interview-junior-javaer/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/resume/interview-junior-javaer/</guid>
      <description>面试必问 自我介绍一下 你有什么职业规划 你为什么要离职 说一下你的优缺点 你的期望薪资是多少 你为什么要选择我们公司 你能否接受加班 你有对象了吗 你还有什么问题要问的吗 基础 说一下UDP、TCP及http与https 如何保证线程安全 线程池工作原理 如何避免死</description>
    </item>
    
    <item>
      <title>JVM-垃圾回收器</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collector/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collector/</guid>
      <description>垃圾回收器分类 垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。 由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。 Java不同版本新特性学习思路： 语法层面：Lambda表达式、s</description>
    </item>
    
    <item>
      <title>Java多线程</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-multi-thread/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-multi-thread/</guid>
      <description>相关概念 线程与进程 进程是一个具有一定独立功能的程序关于某个数据集合的一次运行活动。例如，一个正在运行的程序的实例就是一个进程。 线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。 一条线程指的是进程中一个单一</description>
    </item>
    
    <item>
      <title>HashMap详解</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-hashmap/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-hashmap/</guid>
      <description>相关概念 capacity： 容量，默认16； loadFactor： 负载因子，表示HashMap满的程度，默认值为0.75f，也就是说默认情况下，当HashMap中元素个数达到了容量的3/4的时候就会进行自动扩容； threshold： 阈值；阈值</description>
    </item>
    
    <item>
      <title>JVM-相关概念</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-about/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-about/</guid>
      <description>内存溢出 内存溢出(Out Of Memory，简称OOM)是指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存。 官方文档中对内存溢出的解释是，没有空闲内存，并且垃圾收集器也无法提供更多内存。 由于GC一</description>
    </item>
    
    <item>
      <title>面试中常见的问题</title>
      <link>https://whiteppure.github.io/iblog/posts/resume/interview-questions-and-answers/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/resume/interview-questions-and-answers/</guid>
      <description>面试常见问题 自我介绍 个人经历可以进行适当包装，但是不能造假，一方面如果一旦被人拆穿，后果就不用我说了吧，另一方面如果你说谎，说了一些你自己不感兴趣的项目，在入职之后可能会被分配到该项目上； 在介绍的时候要说明你对面试的公司有什么用，根据不同类</description>
    </item>
    
    <item>
      <title>JVM-垃圾回收</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collection/</link>
      <pubDate>Wed, 21 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-garbage-collection/</guid>
      <description>垃圾回收 垃圾收集，不是Java语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。 垃圾收集机制是Java的招牌能力，极大地提高了开发效率。 如今，垃圾收集几乎成为现代语言的标配，即使经过如此长时间的发展</description>
    </item>
    
    <item>
      <title>JVM-执行引擎</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-execute-engine/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-execute-engine/</guid>
      <description>概述 执行引擎是Java虚拟机核心的组成部分之一，属于JVM的下层，里面包括 解释器、及时编译器、垃圾回收器。 “虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力， 其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统</description>
    </item>
    
    <item>
      <title>JVM-直接内存</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-direct-memory/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-direct-memory/</guid>
      <description>直接内存不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。 直接内存是在Java堆外的、直接向系统申请的内存区间。 操作直接内存演示代码： public class MainTest { public static void main(String[] args) { ByteBuffer allocate = ByteBuffer.allocate(1024 * 1024 * 1024); System.out.println(&amp;#</description>
    </item>
    
    <item>
      <title>JVM-Java对象</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/java-object/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/java-object/</guid>
      <description>对象实例化 对象的创建方式 使用new关键字创建：最常见的方式、单例类中调用getInstance的静态类方法，XXXFactory的静态方法； 使用反射方式创建： 使用Class的newInstance方法：在JDK9里面被标记为过时的方法，因为</description>
    </item>
    
    <item>
      <title>Java语法糖</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-syntax-sugar/</link>
      <pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-syntax-sugar/</guid>
      <description>原文地址：https://www.jianshu.com/p/0f967298a5d7 语法糖 语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法， 这种语法对语言的功能并没有</description>
    </item>
    
    <item>
      <title>JavaIO</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-io/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-io/</guid>
      <description>概念 Java IO通过数据流、序列化和文件系统提供系统输入和输出。 IO，即 in 和 out，也就是输入和输出，指应用程序和外部设备之间的数据传递，常见的外部设备包括文件、管道、网络连接。 传统的 IO 是通过流技术来处理的。 流（Stream），是一个抽象的概念，</description>
    </item>
    
    <item>
      <title>JVM-方法区</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-method-area/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-method-area/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。 运行时数据区域包括 程序计数寄存器 虚</description>
    </item>
    
    <item>
      <title>JVM-堆</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-heap/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-heap/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。 运行时数据区域包括 程序计数寄存器 虚</description>
    </item>
    
    <item>
      <title>JVM-本地方法接口</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-interface/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-interface/</guid>
      <description>概念 简单地讲，一个Native Methodt是一个Java调用非Java代码的接囗。 一个Native Method是这样一个Java方法：该方法的实现由非Java语言实现，比如C。 这个特征并非Java所特有，很多其它的编程语言都有这一机制，比</description>
    </item>
    
    <item>
      <title>JVM-本地方法栈</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-stack/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-native-stack/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。 运行时数据区域包括 程序计数寄存器 虚</description>
    </item>
    
    <item>
      <title>JVM-虚拟机栈</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-stack/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-stack/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。 运行时数据区域包括 程序计数寄存器 虚</description>
    </item>
    
    <item>
      <title>JVM-程序计数寄存器</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-pc-register/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-pc-register/</guid>
      <description>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。 另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。 运行时数据区域包括 程序计数寄存器 虚</description>
    </item>
    
    <item>
      <title>JVM-JVM介绍</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-start/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-start/</guid>
      <description>为什么要学习JVM 大部分Java开发人员，除了会在项目中使用到与Java平台相关的各种高精尖技术，对于Java技术的核心Java虚拟机了解甚少。 一些有一定工作经验的开发人员，打心眼儿里觉得SSM、微服务等上层技术才是重点，基础技术并不重要，</description>
    </item>
    
    <item>
      <title>面向对象</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-object-oriented/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-object-oriented/</guid>
      <description>面向对象是一种编程思想，包括三大特性和六大原则，其中，三大特性指的是封装、继承和多态；六大原则指的是单一职责原则、开放封闭原则、迪米特原则、里氏替换原则、依赖倒置原则以及接口隔离原则，其中，单一职责原则是指一个类应该是一组相关性很高的函数和</description>
    </item>
    
    <item>
      <title>JVM-Java类加载机制</title>
      <link>https://whiteppure.github.io/iblog/posts/jvm/jvm-classloader/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/jvm/jvm-classloader/</guid>
      <description>类加载过程 在Java中，类加载器把一个类装入JVM中，要经过以下步骤： 加载、验证、准备、解析和初始化。其中验证,准备,解析统称为连接。 这5个阶段一般是顺序发生的，但在动态绑定的情况下，解析阶段发生在初始化阶段之后。 类加载器只负责class文</description>
    </item>
    
    <item>
      <title>Java运算</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-operation/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-operation/</guid>
      <description>运算符与表达式 运算符 运算符指明对操作数的运算方式。组成表达式的Java操作符有很多种。运算符按照其要求的操作数数目来分，可以有单目运算符、双目运算符和三目运算符，它们分别对应于1个、2个、3个操作数。 种类 运算符按其功能来分:有算术运算符、赋</description>
    </item>
    
    <item>
      <title>Java数据类型</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-datatype/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-datatype/</guid>
      <description>基本类型 Java语言提供了八种基本类型。六种数值类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型. 俗称4类8种 这里只介绍称4类8种.实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类java.lang.Void</description>
    </item>
    
    <item>
      <title>Java异常</title>
      <link>https://whiteppure.github.io/iblog/posts/java/rookie-exception/</link>
      <pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/java/rookie-exception/</guid>
      <description>异常类型 Throwable 可以用来表示任何可以作为异常抛出的类，分为两种：Error 和 Exception。 其中 Error 用来表示Java程序无法处理的错误；这类错误一般与硬件有关，与程序本身无关，通常由系统进行处理，程序本身无法捕获和处理。是不可控制的。 Exception 分为两种</description>
    </item>
    
    <item>
      <title>线程状态及创建方式</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/thread-state-and-created/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/thread-state-and-created/</guid>
      <description>线程状态及转换 线程状态共包含6种，6中状态又可以互相的转换。 新建状态(New): 创建了线程后尚未启动； 可运行状态(Runnable): 可能正在运行，也可能正在等待 CPU 时间片。包含了运行中(Running)和 就绪（Ready)状态； 就绪（Rea</description>
    </item>
    
    <item>
      <title>Java中常用到的锁</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-lock/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-lock/</guid>
      <description>公平锁 指多个线程按照申请锁的顺序来获取锁类似排队打饭 先来后到 优点: 所有的线程都能得到资源，不会饿死在队列中。 缺点: 吞吐量会下降很多，队列里面除了第一个线程，其他的线程都会阻塞，cpu唤醒阻塞线程的开销会很大。 非公平锁 指在多线程获取锁的顺序并</description>
    </item>
    
    <item>
      <title>Java中集合的线程不安全问题</title>
      <link>https://whiteppure.github.io/iblog/posts/essays/java-thread-collection/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/essays/java-thread-collection/</guid>
      <description>ArrayList ArrayList线程不安全示例: public static void main(String[] args) { ArrayList&amp;lt;String&amp;gt; arrayList = new ArrayList&amp;lt;&amp;gt;(); for(int i=0; i&amp;lt; 3; i++) { new Thread(() -&amp;gt; { arrayList.add(UUID.randomUUID().toString()); System.out.println(arrayList); },String.valueOf(i)).start(); } } // ConcurrentModificationException 同步修改异常 Exception in thread &amp;#34;8&amp;#34; java.util.ConcurrentModificationException [null, 2041b613-8068-4ddd-9d01-305f5680d377] [null, 2041b613-8068-4ddd-9d01-305f5680d377, b3e0296d-e263-4632-a023-4267cdec5e25] [null, 2041b613-8068-4ddd-9d01-305f5680d377] 原因分析: 当某个线程正在执行 add()方法时,被某个线程打断,添加到一半被打断,没有被添加完 解决方案: 使用Vec</description>
    </item>
    
    <item>
      <title>我的简历_优化</title>
      <link>https://whiteppure.github.io/iblog/posts/resume/interview-resume-optimize/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://whiteppure.github.io/iblog/posts/resume/interview-resume-optimize/</guid>
      <description>自我介绍 1998 · 李济芝 河北唐山 15176733539 &amp;nbsp;m15176733539@163.com 本人有严谨的工作态度与高质量意识；能查阅各种开发技术手册，具有独立解决问题的能力。具备扎实的Java基础和四年开发经验，有良好的编程风格，独立熟练使用Spring全家桶等常用类库开发Java服务端程序、对Jav</description>
    </item>
    
  </channel>
</rss>
