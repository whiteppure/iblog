<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java小课堂 on 脚踏实地</title>
    <link>https://blog.lijizhi.website/tags/java%E5%B0%8F%E8%AF%BE%E5%A0%82/</link>
    <description>Recent content in Java小课堂 on 脚踏实地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 10 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.lijizhi.website/tags/java%E5%B0%8F%E8%AF%BE%E5%A0%82/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ThreadLocal深度解析：线程专属的存储空间</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-concurrent-understand-threadlocal/</link>
      <pubDate>Mon, 10 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-concurrent-understand-threadlocal/</guid>
      <description>为什么Spring事务绕不开ThreadLocal 在多线程环境下，Spring事务需要解决一个核心矛盾：如何让同一线程内的多个数据库操作（如Service调用多</description>
    </item>
    <item>
      <title>AQS秒懂指南</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-concurrent-understand-aqs/</link>
      <pubDate>Thu, 06 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-concurrent-understand-aqs/</guid>
      <description>并发世界的红绿灯 假设奶茶店只有1个收银台，如何让100个顾客有序排队？这就是AQS（AbstractQueuedSynchronizer）要解决的问题，管理多线</description>
    </item>
    <item>
      <title>多线程的智能调度专家</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-threading-pool-principle/</link>
      <pubDate>Mon, 03 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-threading-pool-principle/</guid>
      <description>智能调度五步法 在一个忙碌的餐厅后厨，线程池就像经验丰富的主厨团队，高效地处理各种任务请求。下面我们将通过一个餐厅的例子来解释线程池的工作原理。 餐厅后厨与线程池的</description>
    </item>
    <item>
      <title>驾驭并发编程的混沌之海</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-concurrent-understand/</link>
      <pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-concurrent-understand/</guid>
      <description>&amp;ldquo;并发编程的艺术，在于在混乱中建立秩序，在约束中寻求自由。&amp;rdquo; 并发编程的本质 当我们在单核时代讨论并发时，就像在独木桥上协调行人；而在多核时</description>
    </item>
    <item>
      <title>Integer == int？揭秘包装类比较陷阱</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-int-equals-new-integer/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-int-equals-new-integer/</guid>
      <description>当你在Java中写下Integer a = 12;和int b = 12;时，就像是给同一个数字穿上了不同的衣服，一个穿着对象的外套，一个保持着原始数据的质朴。 但它们的比较</description>
    </item>
    <item>
      <title>深度解析new String(“abc”)的对象创建机制</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-new-string-object/</link>
      <pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-new-string-object/</guid>
      <description>核心结论 创建对象数：2 个（当字符串常量池不存在 &amp;ldquo;abc&amp;rdquo; 时）。 第一个对象是&amp;quot;abc&amp;quot;，它属于字符串字面量，因此编译时期会在字符串常量池中创建一个字符</description>
    </item>
    <item>
      <title>Java编译器的「消失魔术」</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-generics-impl/</link>
      <pubDate>Sat, 22 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-generics-impl/</guid>
      <description>代码世界的&amp;quot;智能分类器&amp;quot; 你有一个神奇的盒子，它能自动识别放入的物品类型。泛型就像这个盒子的标签系统： 没有泛型：盒子是个&amp;quot;杂物箱&amp;q</description>
    </item>
    <item>
      <title>Java世界的「X光透视机」</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-reflection-scene/</link>
      <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-reflection-scene/</guid>
      <description>什么是反射 想象你走进一个神秘房间，房间里摆满了上锁的宝箱。正常情况下你需要对应的钥匙才能打开每个箱子，但突然你获得了一个万能开锁器，这个“万能开锁器”就类似于是</description>
    </item>
    <item>
      <title>Java字符串到底能有多长</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-string-howlong/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-string-howlong/</guid>
      <description>编译期 在编写代码时，直接写在代码里的字符串（硬编码字符串）有一个长度限制。 具体来说，字符串的最大长度不能超过65534个字符。如果超过这个限制，编译器会报错。 当</description>
    </item>
    <item>
      <title>为什么Java的String一出生就「不可变」</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-string-final/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-string-final/</guid>
      <description>作为Java开发者，你一定每天都在和String打交道，但你有没有想过：为什么Java的String类被设计成不可变的？ 这个看似简单的设定，背后竟隐藏着语言设计</description>
    </item>
    <item>
      <title>Java对象复制：深拷贝 vs 浅拷贝</title>
      <link>https://blog.lijizhi.website/posts/java/javasmallclass/java-object-replication/</link>
      <pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://blog.lijizhi.website/posts/java/javasmallclass/java-object-replication/</guid>
      <description>如何复制对象 在实际开发过程中，对象的复制与转换是非常常见且重要的操作。这类操作通常出现在不同层之间的数据传递或转换中，例如将数据传输对象（DTO）转换为持久化对</description>
    </item>
  </channel>
</rss>
